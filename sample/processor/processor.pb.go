// Code generated by protoc-gen-go.
// source: processor.proto
// DO NOT EDIT!

/*
Package processor is a generated protocol buffer package.

It is generated from these files:
	processor.proto

It has these top-level messages:
	ProcessRequest
	ProcessReply
*/
package processor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ProcessRequest struct {
	Image string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
}

func (m *ProcessRequest) Reset()         { *m = ProcessRequest{} }
func (m *ProcessRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessRequest) ProtoMessage()    {}

type ProcessReply struct {
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *ProcessReply) Reset()         { *m = ProcessReply{} }
func (m *ProcessReply) String() string { return proto.CompactTextString(m) }
func (*ProcessReply) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Process service

type ProcessClient interface {
	Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessReply, error)
}

type processClient struct {
	cc *grpc.ClientConn
}

func NewProcessClient(cc *grpc.ClientConn) ProcessClient {
	return &processClient{cc}
}

func (c *processClient) Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessReply, error) {
	out := new(ProcessReply)
	err := grpc.Invoke(ctx, "/processor.Process/Process", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Process service

type ProcessServer interface {
	Process(context.Context, *ProcessRequest) (*ProcessReply, error)
}

func RegisterProcessServer(s *grpc.Server, srv ProcessServer) {
	s.RegisterService(&_Process_serviceDesc, srv)
}

func _Process_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProcessServer).Process(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Process_serviceDesc = grpc.ServiceDesc{
	ServiceName: "processor.Process",
	HandlerType: (*ProcessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _Process_Process_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
