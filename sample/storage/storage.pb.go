// Code generated by protoc-gen-go.
// source: storage.proto
// DO NOT EDIT!

/*
Package storage is a generated protocol buffer package.

It is generated from these files:
	storage.proto

It has these top-level messages:
	PutRequest
	PutReply
	GetRequest
	GetReply
	RangeRequest
	RangeReply
	Element
*/
package storage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PutRequest struct {
	Element *Element `protobuf:"bytes,1,opt,name=element" json:"element,omitempty"`
}

func (m *PutRequest) Reset()         { *m = PutRequest{} }
func (m *PutRequest) String() string { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()    {}

func (m *PutRequest) GetElement() *Element {
	if m != nil {
		return m.Element
	}
	return nil
}

type PutReply struct {
}

func (m *PutReply) Reset()         { *m = PutReply{} }
func (m *PutReply) String() string { return proto.CompactTextString(m) }
func (*PutReply) ProtoMessage()    {}

type GetRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}

type GetReply struct {
	Element *Element `protobuf:"bytes,1,opt,name=element" json:"element,omitempty"`
}

func (m *GetReply) Reset()         { *m = GetReply{} }
func (m *GetReply) String() string { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()    {}

func (m *GetReply) GetElement() *Element {
	if m != nil {
		return m.Element
	}
	return nil
}

type RangeRequest struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	Start  string `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	Count  int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *RangeRequest) Reset()         { *m = RangeRequest{} }
func (m *RangeRequest) String() string { return proto.CompactTextString(m) }
func (*RangeRequest) ProtoMessage()    {}

type RangeReply struct {
	Elements []*Element `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
}

func (m *RangeReply) Reset()         { *m = RangeReply{} }
func (m *RangeReply) String() string { return proto.CompactTextString(m) }
func (*RangeReply) ProtoMessage()    {}

func (m *RangeReply) GetElements() []*Element {
	if m != nil {
		return m.Elements
	}
	return nil
}

type Element struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Val string `protobuf:"bytes,2,opt,name=val" json:"val,omitempty"`
}

func (m *Element) Reset()         { *m = Element{} }
func (m *Element) String() string { return proto.CompactTextString(m) }
func (*Element) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for KeyVal service

type KeyValClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*RangeReply, error)
}

type keyValClient struct {
	cc *grpc.ClientConn
}

func NewKeyValClient(cc *grpc.ClientConn) KeyValClient {
	return &keyValClient{cc}
}

func (c *keyValClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error) {
	out := new(PutReply)
	err := grpc.Invoke(ctx, "/storage.KeyVal/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/storage.KeyVal/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValClient) Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*RangeReply, error) {
	out := new(RangeReply)
	err := grpc.Invoke(ctx, "/storage.KeyVal/Range", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyVal service

type KeyValServer interface {
	Put(context.Context, *PutRequest) (*PutReply, error)
	Get(context.Context, *GetRequest) (*GetReply, error)
	Range(context.Context, *RangeRequest) (*RangeReply, error)
}

func RegisterKeyValServer(s *grpc.Server, srv KeyValServer) {
	s.RegisterService(&_KeyVal_serviceDesc, srv)
}

func _KeyVal_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(KeyValServer).Put(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _KeyVal_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(KeyValServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _KeyVal_Range_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(KeyValServer).Range(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _KeyVal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "storage.KeyVal",
	HandlerType: (*KeyValServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _KeyVal_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KeyVal_Get_Handler,
		},
		{
			MethodName: "Range",
			Handler:    _KeyVal_Range_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
